{
	"info": {
		"_postman_id": "fbdc004d-e141-4531-9425-4d61be61c990",
		"name": "EDC-BPDM Automated Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29584075"
	},
	"item": [
		{
			"name": "Step 1 - Query Catalog",
			"item": [
				{
					"name": "Query Catalog",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Parse the JSON response",
									"var responseJson = pm.response.json();",
									"",
									"// Loop through each dataset object in the response",
									"responseJson[\"dcat:dataset\"].forEach(function(dataset) {",
									"    // Get the ID and corresponding value",
									"    var id = dataset[\"@id\"];",
									"    var offerId = dataset[\"odrl:hasPolicy\"][\"@id\"];",
									"    ",
									"    // Set variables for each object",
									"    pm.collectionVariables.set(\"ASSET_\" + id, id);",
									"    pm.collectionVariables.set(\"OFFERID_\" + id, offerId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@context\": {},\r\n    \"protocol\": \"dataspace-protocol-http\",\r\n    \"providerUrl\": \"{{PROVIDER_PROTOCOL_URL}}\",\r\n    \"querySpec\": {\r\n        \"offset\": 0,\r\n        \"limit\": 100,\r\n        \"filter\": \"\",\r\n        \"range\": {\r\n            \"from\": 0,\r\n            \"to\": 100\r\n        },\r\n        \"criterion\": \"\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONSUMER_MANAGEMENT_URL}}/catalog/request",
							"host": [
								"{{CONSUMER_MANAGEMENT_URL}}"
							],
							"path": [
								"catalog",
								"request"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Step2 - Data Access Per Request",
			"item": [
				{
					"name": "Gate",
					"item": [
						{
							"name": "Sharing-State",
							"item": [
								{
									"name": "GET Sharing States",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"QlBETV9HQVRFX0FQSV9DT05UUkFDVA==:QlBETV9HQVRFX0FQSV8y:YTQ2NjM5ZjUtYjdmYy00MjUyLTlmMGQtZWU5ZTU3NDljYjY1\",\n\t\t\"assetId\": \"BPDM_GATE_API_2\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"BPDM_GATE_API_2\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"BPNL00000003CUFH\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"BPDM_GATE_API_2\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId=BPDM_GATE_API_2",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "BPDM_GATE_API_2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PUT Sharing State",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_SHARING_STATE}}\",\n\t\t\"assetId\": \"{{ASSET_PUT_SHARING_STATE}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_PUT_SHARING_STATE}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_PUT_SHARING_STATE}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_PUT_SHARING_STATE}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_PUT_SHARING_STATE}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"businessPartnerType\": \"LEGAL_ENTITY\",\n  \"externalId\": \"string\",\n  \"sharingStateType\": \"Pending\",\n  \"sharingErrorCode\": \"SharingProcessError\",\n  \"sharingErrorMessage\": \"string\",\n  \"bpn\": \"string\",\n  \"sharingProcessStarted\": \"2023-09-15T13:14:19.416Z\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Input",
							"item": [
								{
									"name": "Legal Entity",
									"item": [
										{
											"name": "GET Legal Entity Input",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_BPL_INPUT}}\",\n\t\t\"assetId\": \"{{ASSET_GET_BPL_INPUT}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_BPL_INPUT}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_BPL_INPUT}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_BPL_INPUT}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_GET_BPL_INPUT}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PUT Legal Entity Input",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_PUT_BPL_INPUT}}\",\n\t\t\"assetId\": \"{{ASSET_PUT_BPL_INPUT}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_PUT_BPL_INPUT}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_PUT_BPL_INPUT}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_PUT_BPL_INPUT}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_PUT_BPL_INPUT}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"legalNameParts\": [\n            \"Name of Company\"\n        ],\n        \"identifiers\": [\n            {\n                \"value\": \"123456789\",\n                \"type\": \"CUSTOM_ID_TYPE\",\n                \"issuingBody\": \"CUSTOM_ISSUE_BODY\"\n            }\n        ],\n        \"legalShortName\": \"NoC\",\n        \"legalForm\": \"CUSTOM_LEGAL_FORM\",\n        \"states\": [\n            {\n                \"officialDenotation\": \"Active\",\n                \"validFrom\": \"2020-12-16T05:54:48.942Z\",\n                \"validTo\": \"2023-06-05T07:31:01.213Z\",\n                \"type\": \"ACTIVE\"\n            }\n        ],\n        \"classifications\": [\n            {\n                \"value\": \"Farming of cattle, dairy farming\",\n                \"code\": \"01.21\",\n                \"type\": \"NACE\"\n            }\n        ],\n        \"roles\": [\n            \"SUPPLIER\"\n        ],\n        \"legalAddress\": {\n            \"nameParts\": [\n                \"WESTERN_LATIN_STANDARD\"\n            ],\n            \"states\": [\n                {\n                    \"description\": \"WESTERN_LATIN_STANDARD\",\n                    \"validFrom\": \"2020-12-16T05:54:48.942Z\",\n                    \"validTo\": \"2023-06-05T07:31:01.213Z\",\n                    \"type\": \"ACTIVE\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"value\": \"12345678910\",\n                    \"type\": \"CUSTOM_ID_ADD_TYPE\"\n                }\n            ],\n            \"physicalPostalAddress\": {\n                \"geographicCoordinates\": {\n                    \"longitude\": 0,\n                    \"latitude\": 0,\n                    \"altitude\": 0\n                },\n                \"country\": \"DE\",\n                \"postalCode\": \"70546\",\n                \"city\": \"Stuttgart\",\n                \"street\": {\n                    \"namePrefix\": \"test prefix\",\n                    \"additionalNamePrefix\": \"test1\",\n                    \"name\": \"Stuttgarter Strasse\",\n                    \"additionalNameSuffix\": \"test2\",\n                    \"houseNumber\": \"1\",\n                    \"milestone\": \"Stuttgarter Strasse 1\",\n                    \"direction\": \"Stuttgarter Str.\",\n                    \"nameSuffix\": \"test\"\n                },\n                \"administrativeAreaLevel1\": null,\n                \"administrativeAreaLevel2\": \"test1\",\n                \"administrativeAreaLevel3\": \"test2\",\n                \"district\": \"Stuttgart\",\n                \"companyPostalCode\": \"GM01\",\n                \"industrialZone\": \"HEADQUARTER\",\n                \"building\": \"Building A\",\n                \"floor\": \"A\",\n                \"door\": \"test\"\n            },\n            \"alternativePostalAddress\": {\n                \"geographicCoordinates\": {\n                    \"longitude\": 0,\n                    \"latitude\": 0,\n                    \"altitude\": 0\n                },\n                \"country\": \"DE\",\n                \"postalCode\": \"1234\",\n                \"city\": \"Stuttgart 1\",\n                \"administrativeAreaLevel1\": null,\n                \"deliveryServiceNumber\": \"1234\",\n                \"deliveryServiceType\": \"PO_BOX\",\n                \"deliveryServiceQualifier\": \"test\"\n            },\n            \"roles\": [\n                \"SUPPLIER\"\n            ]\n        },\n        \"externalId\": \"12044444\"\n    }\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "POST Legal Entity Search",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPL_INPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPL_INPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPL_INPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPL_INPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPL_INPUT_SEARCH}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_POST_BPL_INPUT_SEARCH}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    11111111\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Site",
									"item": [
										{
											"name": "GET Site Input",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_BPS_INPUT}}\",\n\t\t\"assetId\": \"{{ASSET_GET_BPS_INPUT}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_BPS_INPUT}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_BPS_INPUT}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_BPS_INPUT}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_GET_BPS_INPUT}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PUT Site Input",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_PUT_BPS_INPUT}}\",\n\t\t\"assetId\": \"{{ASSET_PUT_BPS_INPUT}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_PUT_BPS_INPUT}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_PUT_BPS_INPUT}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_PUT_BPS_INPUT}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_PUT_BPS_INPUT}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"nameParts\": [\n            \"Factory UT\"\n        ],\n        \"states\": [\n            {\n                \"description\": \"Baden-Wuerttemberg\",\n                \"validFrom\": \"2023-06-05T08:29:20.015Z\",\n                \"validTo\": \"2023-06-05T08:29:20.015Z\",\n                \"type\": \"ACTIVE\"\n            }\n        ],\n        \"roles\": [\n            \"SUPPLIER\"\n        ],\n        \"mainAddress\": {\n            \"nameParts\": [\n                \"WESTERN_LATIN_STANDARD\"\n            ],\n            \"states\": [\n                {\n                    \"description\": \"Baden-Wuerttemberg\",\n                    \"validFrom\": \"2023-06-05T08:29:20.015Z\",\n                    \"validTo\": \"2023-06-05T08:29:20.015Z\",\n                    \"type\": \"ACTIVE\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"value\": \"123456789\",\n                    \"type\": \"CUSTOM_SITE_ID\"\n                }\n            ],\n            \"physicalPostalAddress\": {\n                \"geographicCoordinates\": {\n                    \"longitude\": 0,\n                    \"latitude\": 0,\n                    \"altitude\": 0\n                },\n                \"country\": \"DE\",\n                \"postalCode\": \"70327\",\n                \"city\": \"Stuttgart\",\n                \"street\": {\n                    \"namePrefix\": \"test prefix\",\n                    \"additionalNamePrefix\": \"test\",\n                    \"name\": \"Untertuerckheim Strasse 1\",\n                    \"additionalNameSuffix\": \"test suffix\",\n                    \"houseNumber\": \"1234\",\n                    \"milestone\": \"Untertuerckheim Strasse 1\",\n                    \"direction\": \"Untertuerckheim Strasse 1\",\n                    \"nameSuffix\": \"test1 suffix\"\n                },\n                \"administrativeAreaLevel1\": \"Baden-Wuerttember\",\n                \"district\": \"Stuttgart\",\n                \"companyPostalCode\": \"71034\",\n                \"industrialZone\": \"Sindelfinden\",\n                \"building\": \"Building A\",\n                \"floor\": \"A\",\n                \"door\": \"1\"\n            },\n            \"alternativePostalAddress\": {\n                \"geographicCoordinates\": {\n                    \"longitude\": 0,\n                    \"latitude\": 0,\n                    \"altitude\": 0\n                },\n                \"country\": \"DE\",\n                \"postalCode\": \"1234\",\n                \"city\": \"Stuttgart\",\n                \"administrativeAreaLevel1\": \"Stuttgart\",\n                \"deliveryServiceNumber\": \"Untertuerckheim Strasse 1\",\n                \"deliveryServiceType\": \"PO_BOX\",\n                \"deliveryServiceQualifier\": \"test qualifier\"\n            },\n            \"roles\": [\n                \"SUPPLIER\"\n            ]\n        },\n        \"externalId\": \"12044444\",\n        \"legalEntityExternalId\": \"12044444\"\n    }\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "POST Site Input Search",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPS_INPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPS_INPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPS_INPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPS_INPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPS_INPUT_SEARCH}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_POST_BPS_INPUT_SEARCH}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"12044444\"\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Address",
									"item": [
										{
											"name": "GET Addess Input",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_BPA_INPUT}}\",\n\t\t\"assetId\": \"{{ASSET_GET_BPA_INPUT}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_BPA_INPUT}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_BPA_INPUT}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_BPA_INPUT}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_GET_BPA_INPUT}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PUT Address Input",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_PUT_BPA_INPUT}}\",\n\t\t\"assetId\": \"{{ASSET_PUT_BPA_INPUT}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_PUT_BPA_INPUT}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_PUT_BPA_INPUT}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_PUT_BPA_INPUT}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_PUT_BPA_INPUT}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"nameParts\": [\n            \"WESTERN_LATIN_STANDARD\"\n        ],\n        \"states\": [\n            {\n                \"description\": \"Baden-Wuerttemberg\",\n                \"validFrom\": \"2023-06-05T10:32:30.231Z\",\n                \"validTo\": \"2023-06-05T10:32:30.231Z\",\n                \"type\": \"ACTIVE\"\n            }\n        ],\n        \"identifiers\": [\n            {\n                \"value\": \"123456789\",\n                \"type\": \"CUSTOM_ADDRESS_ID\"\n            }\n        ],\n        \"physicalPostalAddress\": {\n            \"geographicCoordinates\": {\n                \"longitude\": 0,\n                \"latitude\": 0,\n                \"altitude\": 0\n            },\n            \"country\": \"DE\",\n            \"postalCode\": \"70327\",\n            \"city\": \"Stuttgart\",\n            \"street\": {\n                \"namePrefix\": \"test prefix\",\n                \"additionalNamePrefix\": \"test\",\n                \"name\": \"Untertuerckheim Strasse 1\",\n                \"additionalNameSuffix\": \"test suffix\",\n                \"houseNumber\": \"1234\",\n                \"milestone\": \"Untertuerckheim Strasse 1\",\n                \"direction\": \"Untertuerckheim Strasse 1\",\n                \"nameSuffix\": \"test1 suffix\"\n            },\n            \"administrativeAreaLevel1\": \"Baden-Wuerttember\",\n            \"district\": \"Stuttgart\",\n            \"companyPostalCode\": \"71034\",\n            \"industrialZone\": \"Sindelfinden\",\n            \"building\": \"Building A\",\n            \"floor\": \"A\",\n            \"door\": \"1\"\n        },\n        \"alternativePostalAddress\": {\n            \"geographicCoordinates\": {\n                \"longitude\": 0,\n                \"latitude\": 0,\n                \"altitude\": 0\n            },\n            \"country\": \"DE\",\n            \"postalCode\": \"1234\",\n            \"city\": \"Stuttgart\",\n            \"administrativeAreaLevel1\": \"Stuttgart\",\n            \"deliveryServiceNumber\": \"Untertuerckheim Strasse 1\",\n            \"deliveryServiceType\": \"PO_BOX\",\n            \"deliveryServiceQualifier\": \"test qualifier\"\n        },\n        \"roles\": [\n            \"SUPPLIER\"\n        ],\n        \"externalId\": \"12044444\",\n        \"legalEntityExternalId\": \"12044444\",\n        \"siteExternalId\": null\n    }\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "POST Address Input Search",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPA_INPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPA_INPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPA_INPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPA_INPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPA_INPUT_SEARCH}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_POST_BPA_INPUT_SEARCH}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API GET",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"12044444_legalAddress\"\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Generic",
									"item": [
										{
											"name": "PUT Generic Input",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_PUT_GENERIC_INPUT}}\",\n\t\t\"assetId\": \"{{ASSET_PUT_GENERIC_INPUT}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_PUT_GENERIC_INPUT}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_PUT_GENERIC_INPUT}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_PUT_GENERIC_INPUT}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_PUT_GENERIC_INPUT}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API PUT",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n  {\n    \"externalId\": \"generic_test\",\n    \"nameParts\": [\n      \"Name of Company 1\",\n      \"Name of Company 2\",\n      \"Name of Company 3\",\n      \"Name of Company 4\",\n      \"Name of Company 5\"    \n    ],\n    \"shortName\": \"string\",\n    \"identifiers\": [\n      {\n           \"value\": \"123456789\",\n           \"type\": \"CUSTOM_ID_TYPE\",\n           \"issuingBody\": \"CUSTOM_ISSUE_BODY\"\n       }\n    ],\n    \"legalForm\": \"CUSTOM_FORM\",\n    \"states\": [\n      {\n        \"validFrom\": \"2023-09-29T08:57:22.999Z\",\n        \"validTo\": \"2023-09-29T08:57:22.999Z\",\n        \"type\": \"ACTIVE\",\n        \"description\": \"Active\"\n      }\n    ],\n    \"classifications\": [\n      {\n        \"type\": \"NACE\",\n        \"code\": \"01.21\",\n        \"value\": \"Farming of cattle, dairy farming\"\n      }\n    ],\n    \"roles\": [\n      \"SUPPLIER\"\n    ],\n    \"postalAddress\": {\n      \"addressType\": null,\n      \"physicalPostalAddress\": {\n        \"geographicCoordinates\": {\n          \"longitude\": 0,\n          \"latitude\": 0,\n          \"altitude\": 0\n        },\n        \"country\": \"DE\",\n        \"administrativeAreaLevel1\": \"Baden-Wuerttemberg\",\n        \"administrativeAreaLevel2\": \"test1\",\n        \"administrativeAreaLevel3\": \"test2\",\n        \"postalCode\": \"70546\",\n        \"city\": \"Stuttgart\",\n        \"district\": \"Stuttgart\",\n        \"street\": {\n          \"namePrefix\": \"test prefix\",\n          \"additionalNamePrefix\": \"test1\",\n          \"name\": \"Stuttgarter Strasse\",\n          \"nameSuffix\": \"test\",\n          \"additionalNameSuffix\": \"test2\",\n          \"houseNumber\": \"1\",\n          \"milestone\": \"Stuttgarter Strasse 1\",\n          \"direction\": \"Stuttgarter Str.\"\n        },\n        \"companyPostalCode\": \"GM01\",\n        \"industrialZone\": \"HEADQUARTER\",\n        \"building\": \"Building A\",\n        \"floor\": \"A\",\n        \"door\": \"test\"\n      },\n      \"alternativePostalAddress\": {\n        \"geographicCoordinates\": {\n          \"longitude\": 0,\n          \"latitude\": 0,\n          \"altitude\": 0\n        },\n        \"country\": \"DE\",\n        \"administrativeAreaLevel1\": \"Baden-Wuerttemberg 1\",\n        \"postalCode\": \"1234\",\n        \"city\": \"Stuttgart 1\",\n        \"deliveryServiceType\": \"PO_BOX\",\n        \"deliveryServiceQualifier\": \"test\",\n        \"deliveryServiceNumber\": \"1234\"\n      }\n    },\n    \"isOwner\": true\n  }\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "POST Address Input Search",
											"item": [
												{
													"name": "Initiate EDR Negotation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_GENERIC_INPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_GENERIC_INPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_GENERIC_INPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_GENERIC_INPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query EDRs Cached",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response is an array and has elements",
																	"if (Array.isArray(responseBody) && responseBody.length > 0) {",
																	"    // Get the last object in the array",
																	"    var lastObject = responseBody[responseBody.length - 1];",
																	"",
																	"    // Check if the last object has the \"edc:transferProcessId\" property",
																	"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
																	"        // Copy the value of \"edc:transferProcessId\" to a variable",
																	"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
																	"",
																	"        // Log the value to the Postman console",
																	"        console.log(\"Transfer Process ID: \" + transferProcessId);",
																	"",
																	"        // You can also use the value of transferProcessId as needed",
																	"        // For example, you can set it as an environment variable",
																	"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
																	"    } else {",
																	"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
																	"    }",
																	"} else {",
																	"    console.log(\"Response is not an array or it has no elements.\");",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_GENERIC_INPUT_SEARCH}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs"
															],
															"query": [
																{
																	"key": "assetId",
																	"value": "{{ASSET_POST_GENERIC_INPUT_SEARCH}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get EDR by tp ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"// Parse the JSON response",
																	"var responseBody = pm.response.json();",
																	"",
																	"// Check if the response contains the \"edc:authCode\" property",
																	"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
																	"    // Get the value of \"edc:authCode\"",
																	"    var authCode = responseBody[\"edc:authCode\"];",
																	"",
																	"    // Set the collection variable with the value of \"edc:authCode\"",
																	"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
																	"",
																	"    // Log the value to the Postman console",
																	"    console.log(\"edc:authCode: \" + authCode);",
																	"} else {",
																	"    console.log(\"Response does not contain 'edc:authCode' property.\");",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
															"host": [
																"{{CONSUMER_ADAPTER_URL}}"
															],
															"path": [
																"edrs",
																"{{TRANSFERID_AUTOTEST}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Public API POST",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{AUTH_CODE}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"12044444_legalAddress\"\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PROVIDER_PUBLIC_API}}",
															"host": [
																"{{PROVIDER_PUBLIC_API}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Output",
							"item": [
								{
									"name": "POST Legal Entity Output Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPL_OUTPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPL_OUTPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPL_OUTPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPL_OUTPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPL_OUTPUT_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_BPL_OUTPUT_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"11111111\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST Site Output Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPS_OUTPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPS_OUTPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPS_OUTPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPS_OUTPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPS_OUTPUT_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_BPS_OUTPUT_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"12044444\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST Address Output Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPA_OUTPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPA_OUTPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPA_OUTPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPA_OUTPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPA_OUTPUT_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_BPA_OUTPUT_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"12044444_legalAddress\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST Generic Output Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_GENERIC_OUTPUT_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_GENERIC_OUTPUT_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_GENERIC_OUTPUT_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_GENERIC_OUTPUT_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_GENERIC_OUTPUT_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_GENERIC_OUTPUT_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API POST",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"12044444_legalAddress\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Changelog",
							"item": [
								{
									"name": "POST Input Changelog Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_INPUT_CHANGELOG_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_INPUT_CHANGELOG_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_INPUT_CHANGELOG_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_INPUT_CHANGELOG_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_INPUT_CHANGELOG_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_INPUT_CHANGELOG_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fromTime\": \"2020-12-16T05:54:48.942Z\",\n  \"externalIds\": [\n    \"12044444\"\n  ],\n  \"lsaTypes\": [\n    \"LEGAL_ENTITY\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST Output Changelog Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_OUTPUT_CHANGELOG_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_OUTPUT_CHANGELOG_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_OUTPUT_CHANGELOG_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_OUTPUT_CHANGELOG_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_OUTPUT_CHANGELOG_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_OUTPUT_CHANGELOG_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fromTime\": \"2020-12-16T05:54:48.942Z\",\n  \"externalIds\": [\n    \"12044444\"\n  ],\n  \"lsaTypes\": [\n    \"LEGAL_ENTITY\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Pool",
					"item": [
						{
							"name": "Metadata",
							"item": [
								{
									"name": "GET Legal Forms",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_LEGAL_FORMS}}\",\n\t\t\"assetId\": \"{{ASSET_GET_LEGAL_FORMS}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_LEGAL_FORMS}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_LEGAL_FORMS}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_LEGAL_FORMS}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_GET_LEGAL_FORMS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Identifier Types",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_IDENTIFIER_TYPES}}\",\n\t\t\"assetId\": \"{{ASSET_GET_IDENTIFIER_TYPES}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_IDENTIFIER_TYPES}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_IDENTIFIER_TYPES}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_IDENTIFIER_TYPES}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_GET_IDENTIFIER_TYPES}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Field Quality Rules",
									"item": [
										{
											"name": "Initiate EDR Negotation Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_FIELD_QUALITY_RULES}}\",\n\t\t\"assetId\": \"{{ASSET_GET_FIELD_QUALITY_RULES}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_FIELD_QUALITY_RULES}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_FIELD_QUALITY_RULES}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_FIELD_QUALITY_RULES}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_GET_FIELD_QUALITY_RULES}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET Administrative Level 1",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_ADMINISTRATIVE_AREAS_LEVEL_1}}\",\n\t\t\"assetId\": \"{{ASSET_GET_ADMINISTRATIVE_AREAS_LEVEL_1}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_ADMINISTRATIVE_AREAS_LEVEL_1}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_ADMINISTRATIVE_AREAS_LEVEL_1}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_ADMINISTRATIVE_AREAS_LEVEL_1}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_GET_ADMINISTRATIVE_AREAS_LEVEL_1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Legal Entity",
							"item": [
								{
									"name": "GET Legal Entities",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_BPL_POOL}}\",\n\t\t\"assetId\": \"{{ASSET_GET_BPL_POOL}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_BPL_POOL}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_BPL_POOL}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_BPL_POOL}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_GET_BPL_POOL}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST Legal Entity Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPL_POOL_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPL_POOL_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPL_POOL_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPL_POOL_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPL_POOL_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_BPL_POOL_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"BPNL000000000001\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Sites",
							"item": [
								{
									"name": "GET Sites",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_BPS_POOL}}\",\n\t\t\"assetId\": \"{{ASSET_GET_BPS_POOL}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_BPS_POOL}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_BPS_POOL}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_BPS_POOL}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_GET_BPS_POOL}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST Site Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPS_POOL_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPS_POOL_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPS_POOL_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPS_POOL_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPS_POOL_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_BPS_POOL_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"legalEntities\": [\n        \"BPNL000000000001\"\n    ],\n    \"sites\": [\n        \"BPNS000000000001\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Addresses",
							"item": [
								{
									"name": "GET Addresses",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_GET_BPA_POOL}}\",\n\t\t\"assetId\": \"{{ASSET_GET_BPA_POOL}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_GET_BPA_POOL}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_GET_BPA_POOL}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_GET_BPA_POOL}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_GET_BPA_POOL}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST Address Search",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_BPA_POOL_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_BPA_POOL_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_BPA_POOL_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_BPA_POOL_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_BPA_POOL_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_BPA_POOL_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"legalEntities\": [\n        \"BPNL000000000001\"\n    ],\n    \"sites\": [\n        \"BPNS000000000001\"\n    ],\n    \"addresses\": [\n        \"BPNA000000000001\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Changelog",
							"item": [
								{
									"name": "POST Business Partner Changelog",
									"item": [
										{
											"name": "Initiate EDR Negotation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"@context\": {\n\t\t\"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n\t},\n\t\"@type\": \"NegotiationInitiateRequestDto\",\n\t\"connectorAddress\": \"{{PROVIDER_PROTOCOL_URL}}\",\n\t\"protocol\": \"dataspace-protocol-http\",\n\t\"connectorId\": \"{{PROVIDER_ID}}\",\n\t\"providerId\": \"{{PROVIDER_ID}}\",\n\t\"offer\": {\n\t\t\"offerId\": \"{{OFFERID_POST_CHANGELOG_POOL_SEARCH}}\",\n\t\t\"assetId\": \"{{ASSET_POST_CHANGELOG_POOL_SEARCH}}\",\n\t\t\"policy\": {\n\t\t\t\"@type\": \"odrl:Set\",\n\t\t\t\"odrl:permission\": {\n\t\t\t\t\"odrl:target\": \"{{ASSET_POST_CHANGELOG_POOL_SEARCH}}\",\n\t\t\t\t\"odrl:action\": {\n\t\t\t\t\t\"odrl:type\": \"USE\"\n\t\t\t\t},\n\t\t\t\t\"odrl:constraint\": {\n\t\t\t\t\t\"odrl:or\": {\n\t\t\t\t\t\t\"odrl:leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\t\"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n\t\t\t\t\t\t\"odrl:rightOperand\": \"{{POLICY_BPN}}\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"odrl:prohibition\": [],\n\t\t\t\"odrl:obligation\": [],\n\t\t\t\"odrl:target\": \"{{ASSET_POST_CHANGELOG_POOL_SEARCH}}\"\n\t\t}\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query EDRs Cached",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response is an array and has elements",
															"if (Array.isArray(responseBody) && responseBody.length > 0) {",
															"    // Get the last object in the array",
															"    var lastObject = responseBody[responseBody.length - 1];",
															"",
															"    // Check if the last object has the \"edc:transferProcessId\" property",
															"    if (lastObject.hasOwnProperty(\"edc:transferProcessId\")) {",
															"        // Copy the value of \"edc:transferProcessId\" to a variable",
															"        var transferProcessId = lastObject[\"edc:transferProcessId\"];",
															"",
															"        // Log the value to the Postman console",
															"        console.log(\"Transfer Process ID: \" + transferProcessId);",
															"",
															"        // You can also use the value of transferProcessId as needed",
															"        // For example, you can set it as an environment variable",
															"        pm.collectionVariables.set(\"TRANSFERID_AUTOTEST\", transferProcessId);",
															"    } else {",
															"        console.log(\"The last object does not have 'edc:transferProcessId' property.\");",
															"    }",
															"} else {",
															"    console.log(\"Response is not an array or it has no elements.\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs?assetId={{ASSET_POST_CHANGELOG_POOL_SEARCH}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs"
													],
													"query": [
														{
															"key": "assetId",
															"value": "{{ASSET_POST_CHANGELOG_POOL_SEARCH}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EDR by tp ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"// Parse the JSON response",
															"var responseBody = pm.response.json();",
															"",
															"// Check if the response contains the \"edc:authCode\" property",
															"if (responseBody.hasOwnProperty(\"edc:authCode\")) {",
															"    // Get the value of \"edc:authCode\"",
															"    var authCode = responseBody[\"edc:authCode\"];",
															"",
															"    // Set the collection variable with the value of \"edc:authCode\"",
															"    pm.collectionVariables.set(\"AUTH_CODE\", authCode);",
															"",
															"    // Log the value to the Postman console",
															"    console.log(\"edc:authCode: \" + authCode);",
															"} else {",
															"    console.log(\"Response does not contain 'edc:authCode' property.\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{CONSUMER_ADAPTER_URL}}/edrs/{{TRANSFERID_AUTOTEST}}",
													"host": [
														"{{CONSUMER_ADAPTER_URL}}"
													],
													"path": [
														"edrs",
														"{{TRANSFERID_AUTOTEST}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Public API GET",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{AUTH_CODE}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fromTime\": \"2023-03-21T09:00:25.298594Z\",\n  \"bpns\": [\n    \"BPNL000000000001\"\n  ],\n  \"lsaTypes\": [\n    \"LEGAL_ENTITY\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PROVIDER_PUBLIC_API}}",
													"host": [
														"{{PROVIDER_PUBLIC_API}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{API-KEY}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-Api-Key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "SHARING_MEMBER_EDC_BASE_URL",
			"value": "https://sharing-member-edc.net",
			"type": "string"
		},
		{
			"key": "GATE_EDC_BASE_URL",
			"value": "https://gate-edc.net.net",
			"type": "string"
		},
		{
			"key": "CONSUMER_MANAGEMENT_URL",
			"value": "{{SHARING_MEMBER_EDC_BASE_URL}}/management/v2",
			"type": "string"
		},
		{
			"key": "PROVIDER_PROTOCOL_URL",
			"value": "{{GATE_EDC_BASE_URL}}/api/v1/dsp"
		},
		{
			"key": "PROVIDER_MANAGEMENT_URL",
			"value": "{{GATE_EDC_BASE_URL}}/management/v2"
		},
		{
			"key": "CONSUMER_ADAPTER_URL",
			"value": "{{SHARING_MEMBER_EDC_BASE_URL}}/management",
			"type": "string"
		},
		{
			"key": "PROVIDER_PUBLIC_API",
			"value": "{{GATE_EDC_BASE_URL}}/api/public",
			"type": "string"
		},
		{
			"key": "POLICY_ID",
			"value": "HAS_SHARING_MEMBER_BPN",
			"type": "default"
		},
		{
			"key": "CONTRACT_POLICY_ID",
			"value": "HAS_SHARING_MEMBER_BPN",
			"type": "default"
		},
		{
			"key": "ACCESS_POLICY_ID",
			"value": "HAS_SHARING_MEMBER_BPN",
			"type": "default"
		},
		{
			"key": "CONTRACT_DEFINITION_ID",
			"value": "COMPANY_TEST_SHARING_MEMBER",
			"type": "default"
		},
		{
			"key": "POLICY_BPN",
			"value": "BPNL Sharing Member",
			"type": "default"
		},
		{
			"key": "PROVIDER_ID",
			"value": "BPNL Gate Provider",
			"type": "string"
		},
		{
			"key": "EDC_NAMESPACE",
			"value": "https://w3id.org/edc/v0.0.1/ns/",
			"type": "string"
		},
		{
			"key": "API-KEY",
			"value": "api-key",
			"type": "string"
		},
		{
			"key": "ASSET_GET_SHARING_STATE",
			"value": "GET_SHARING_STATE",
			"type": "string"
		},
		{
			"key": "ASSET_PUT_SHARING_STATE",
			"value": "PUT_SHARING_STATE",
			"type": "string"
		},
		{
			"key": "ASSET_GET_BPL_INPUT",
			"value": "GET_BPL_INPUT",
			"type": "string"
		},
		{
			"key": "ASSET_PUT_BPL_INPUT",
			"value": "PUT_BPL_INPUT",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPL_INPUT_SEARCH",
			"value": "POST_BPL_INPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_GET_BPS_INPUT",
			"value": "GET_BPS_INPUT",
			"type": "string"
		},
		{
			"key": "ASSET_PUT_BPS_INPUT",
			"value": "PUT_BPS_INPUT",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPS_INPUT_SEARCH",
			"value": "POST_BPS_INPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_GET_BPA_INPUT",
			"value": "GET_BPA_INPUT",
			"type": "string"
		},
		{
			"key": "ASSET_PUT_BPA_INPUT",
			"value": "PUT_BPA_INPUT",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPA_INPUT_SEARCH",
			"value": "POST_BPA_INPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPL_OUTPUT_SEARCH",
			"value": "POST_BPL_OUTPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPS_OUTPUT_SEARCH",
			"value": "POST_BPS_OUTPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPA_OUTPUT_SEARCH",
			"value": "POST_BPA_OUTPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_POST_INPUT_CHANGELOG_SEARCH",
			"value": "POST_INPUT_CHANGELOG_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_POST_OUTPUT_CHANGELOG_SEARCH",
			"value": "POST_OUTPUT_CHANGELOG_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_GET_LEGAL_FORMS",
			"value": "GET_LEGAL_FORMS",
			"type": "string"
		},
		{
			"key": "ASSET_GET_IDENTIFIER_TYPES",
			"value": "GET_IDENTIFIER_TYPES",
			"type": "string"
		},
		{
			"key": "ASSET_GET_FIELD_QUALITY_RULES",
			"value": "GET_FIELD_QUALITY_RULES",
			"type": "string"
		},
		{
			"key": "ASSET_GET_BPL_POOL",
			"value": "GET_BPL_POOL",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPL_POOL_SEARCH",
			"value": "POST_BPL_POOL_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_GET_BPS_POOL",
			"value": "GET_BPS_POOL",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPS_POOL_SEARCH",
			"value": "POST_BPS_POOL_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_GET_BPA_POOL",
			"value": "GET_BPA_POOL",
			"type": "string"
		},
		{
			"key": "ASSET_POST_BPA_POOL_SEARCH",
			"value": "POST_BPA_POOL_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_POST_CHANGELOG_POOL_SEARCH",
			"value": "POST_CHANGELOG_POOL_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_POST_GENERIC_INPUT_SEARCH",
			"value": "POST_GENERIC_INPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_PUT_GENERIC_INPUT",
			"value": "PUT_GENERIC_INPUT",
			"type": "string"
		},
		{
			"key": "ASSET_POST_GENERIC_OUTPUT_SEARCH",
			"value": "POST_GENERIC_OUTPUT_SEARCH",
			"type": "string"
		},
		{
			"key": "ASSET_GET_ADMINISTRATIVE_AREAS_LEVEL_1",
			"value": "GET_ADMINISTRATIVE_AREAS_LEVEL_1",
			"type": "string"
		},
		{
			"key": "TRANSFERID_AUTOTEST",
			"value": ""
		},
		{
			"key": "AUTH_CODE",
			"value": ""
		},
		{
			"key": "OFFERID_GET_SHARING_STATE",
			"value": ""
		},
		{
			"key": "OFFERID_GET_BPL_INPUT",
			"value": ""
		},
		{
			"key": "OFFERID_PUT_BPL_INPUT",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPL_INPUT_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_GET_BPS_INPUT",
			"value": ""
		},
		{
			"key": "OFFERID_PUT_BPS_INPUT",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPS_INPUT_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_GET_BPA_INPUT",
			"value": ""
		},
		{
			"key": "OFFERID_PUT_BPA_INPUT",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPA_INPUT_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPL_OUTPUT_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPS_OUTPUT_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPA_OUTPUT_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_POST_INPUT_CHANGELOG_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_POST_OUTPUT_CHANGELOG_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_GET_LEGAL_FORMS",
			"value": ""
		},
		{
			"key": "OFFERID_GET_IDENTIFIER_TYPES",
			"value": ""
		},
		{
			"key": "OFFERID_GET_FIELD_QUALITY_RULES",
			"value": ""
		},
		{
			"key": "OFFERID_GET_BPL_POOL",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPL_POOL_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_GET_BPS_POOL",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPS_POOL_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_GET_BPA_POOL",
			"value": ""
		},
		{
			"key": "OFFERID_POST_BPA_POOL_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_POST_CHANGELOG_POOL_SEARCH",
			"value": ""
		},
		{
			"key": "OFFERID_POST_GENERIC_INPUT_SEARCH",
			"value": "",
			"type": "string"
		},
		{
			"key": "OFFERID_PUT_GENERIC_INPUT",
			"value": "",
			"type": "string"
		},
		{
			"key": "OFFERID_POST_GENERIC_OUTPUT_SEARCH",
			"value": "",
			"type": "string"
		},
		{
			"key": "ASSET_BPDM_GATE_API_2",
			"value": ""
		},
		{
			"key": "OFFERID_BPDM_GATE_API_2",
			"value": ""
		},
		{
			"key": "ASSET_assetId",
			"value": ""
		},
		{
			"key": "OFFERID_assetId",
			"value": ""
		},
		{
			"key": "ASSET_test-gate-api-asset",
			"value": ""
		},
		{
			"key": "OFFERID_test-gate-api-asset",
			"value": ""
		},
		{
			"key": "ASSET_test-gate-api-asset-2",
			"value": ""
		},
		{
			"key": "OFFERID_test-gate-api-asset-2",
			"value": ""
		},
		{
			"key": "OFFERID_GET_ADMINISTRATIVE_AREAS_LEVEL_1",
			"value": "",
			"type": "string"
		}
	]
}